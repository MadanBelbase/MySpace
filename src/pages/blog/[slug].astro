---
import BaseLayout from '../../layouts/BlogLayout.astro';
import { getCollection } from 'astro:content';
import '../../styles/global.css';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post, allPosts: posts },
  }));
}

const { post, allPosts } = Astro.props;
const { Content } = await post.render();

// Recommended posts
const recommendedPosts = allPosts
  .filter(p => p.slug !== post.slug)
  .slice(0, 3);
---

<BaseLayout title={post.data.title} description={post.data.description}>
  <!-- Scroll Progress Bar -->
  <div id="progress-container" class="fixed top-0 left-0 w-full h-1 bg-gray-200 z-50">
    <div id="progress-bar" class="h-1 bg-gradient-to-r from-blue-500 to-purple-500 w-0"></div>
  </div>

  <div class="max-w-7xl mx-auto px-4 py-12 flex flex-col lg:flex-row gap-12">
    <!-- Main Article -->
    <article class="lg:w-2/3 prose prose-lg prose-slate max-w-none font-serif leading-relaxed">
      <header class="mb-12">
        <h1 class="text-5xl font-bold mb-4 text-gray-900 tracking-tight">
          {post.data.title}
        </h1>
        <div class="flex flex-wrap gap-2 mb-4">
          {post.data.tags.map(tag => (
            <span class="text-sm font-semibold px-3 py-1 rounded-full bg-gradient-to-r from-blue-100 to-purple-100 text-blue-800">
              {tag}
            </span>
          ))}
        </div>
        <div class="flex items-center gap-4 text-sm text-gray-500 mb-6">
          <time datetime={post.data.pubDate}>
            {new Date(post.data.pubDate).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </time>
          <span>•</span>
          <span>{Math.ceil(post.body.split(' ').length / 200)} min read</span>
        </div>
        {post.data.image && (
          <figure class="my-8 text-center">
            <img 
              src={post.data.image} 
              alt={post.data.title} 
              class="w-full max-w-4xl mx-auto rounded-xl shadow-2xl object-cover transition-transform hover:scale-105 duration-300"
            />
            <figcaption class="text-sm text-gray-500 mt-2 italic">{post.data.title}</figcaption>
          </figure>
        )}
      </header>

      <!-- Blog Content -->
      <div class="content-area max-w-[750px] mx-auto space-y-6 text-lg">
        <Content />
      </div>

      <!-- Navigation -->
      <div class="mt-12 flex justify-between pt-6 border-t border-gray-200">
        <a href="/MySpace/blog/" class="text-blue-600 hover:text-purple-600 hover:underline font-medium">
          ← Back to all posts
        </a>
      </div>
    </article>

    <!-- Sidebar -->
    <aside class="lg:w-1/3 lg:pl-8 lg:border-l lg:border-gray-200">
      <div class="sticky top-24 space-y-10">
        <!-- TOC -->
        <div>
          <h2 class="text-lg font-bold mb-4">On this page</h2>
          <nav id="toc" class="text-sm space-y-2 text-gray-600"></nav>
        </div>

        <!-- Recommended Reads -->
        <div>
          <h2 class="text-lg font-bold mb-6">Recommended Reads</h2>
          <div class="space-y-6">
            {recommendedPosts.map(recPost => (
              <a href={`/MySpace//blog/${recPost.slug}/`} class="block group">
                <article class="p-4 border border-gray-200 rounded-lg hover:border-purple-400 transition-colors bg-white shadow-sm hover:shadow-lg">
                  <h3 class="text-lg font-semibold mb-2 text-gray-900 group-hover:text-purple-600">
                    {recPost.data.title}
                  </h3>
                  <p class="text-sm text-gray-600 mb-2 line-clamp-2">
                    {recPost.data.description}
                  </p>
                </article>
              </a>
            ))}
          </div>
        </div>
      </div>
    </aside>
  </div>
</BaseLayout>

<style is:global>
  /* Fonts */
  body {
    font-family: 'Inter', sans-serif;
    background: #f8fafc;
  }

  .prose {
    font-family: 'Merriweather', serif;
    line-height: 1.75;
    color: #1e293b;
  }

  .prose h1, .prose h2, .prose h3 {
    font-family: 'Inter', sans-serif;
    font-weight: 700;
    color: #111827;
  }

  /* Callouts */
  .callout { padding: 1rem 1.25rem; border-radius: 0.5rem; margin: 1.5rem 0; font-size: 1rem; }
  .callout-tip { background: #ebf8ff; border-left: 4px solid #3182ce; color: #1e40af; }
  .callout-warning { background: #fffaf0; border-left: 4px solid #dd6b20; color: #9c4221; }
  .callout-note { background: #f0fff4; border-left: 4px solid #38a169; color: #2f855a; }

  /* Blockquote */
  blockquote { border-left: 4px solid #818cf8; padding-left: 1rem; font-style: italic; background: #f1f5f9; border-radius: 0.5rem; color: #4b5563; }

  /* Code Blocks */
  pre { position: relative; background: #1e293b !important; color: #f8fafc !important; padding: 1rem; border-radius: 0.75rem; overflow-x: auto; font-size: 0.95rem; }
  pre code { font-family: 'Fira Code', monospace; }
  .copy-btn { position: absolute; top: 0.5rem; right: 0.5rem; background: #334155; color: white; border-radius: 0.375rem; padding: 0.25rem 0.5rem; font-size: 0.75rem; cursor: pointer; }

  /* Images */
  .content-area img { border-radius: 0.75rem; transition: transform 0.3s; }
  .content-area img:hover { transform: scale(1.05); }

  /* TOC */
  #toc a { display: block; padding: 2px 0; }
  #toc a:hover { color: #7c3aed; }

  /* Responsive */
  @media (max-width: 1024px) { aside { display: none; } }
</style>

<script>
  // Scroll Progress Bar
  if (typeof window !== "undefined") {
    window.addEventListener("scroll", () => {
      const scrollTop = window.scrollY;
      const docHeight = document.body.scrollHeight - window.innerHeight;
      document.getElementById("progress-bar").style.width = (scrollTop / docHeight * 100) + "%";
    });
  }

  // TOC Generator
  if (typeof window !== "undefined") {
    window.addEventListener("DOMContentLoaded", () => {
      const headings = document.querySelectorAll(".content-area h2, .content-area h3");
      const toc = document.getElementById("toc");
      headings.forEach(h => {
        if (!h.id) h.id = h.textContent.trim().toLowerCase().replace(/\s+/g, "-");
        const link = document.createElement("a");
        link.href = "#" + h.id;
        link.textContent = h.textContent;
        link.className = h.tagName === "H2" ? "font-medium" : "ml-4";
        toc.appendChild(link);
      });
    });
  }

  // Code Copy Button
  if (typeof window !== "undefined") {
    window.addEventListener("DOMContentLoaded", () => {
      document.querySelectorAll("pre").forEach(block => {
        const button = document.createElement("button");
        button.textContent = "Copy";
        button.className = "copy-btn";
        button.addEventListener("click", () => {
          navigator.clipboard.writeText(block.innerText);
          button.textContent = "Copied!";
          setTimeout(() => button.textContent = "Copy", 2000);
        });
        block.appendChild(button);
      });
    });
  }
</script>

