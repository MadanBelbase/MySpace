---
import BaseLayout from '../../layouts/BlogLayout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import '../../styles/global.css';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post, allPosts: posts },
  }));
}

interface Props {
  post: CollectionEntry<'blog'>;
  allPosts: CollectionEntry<'blog'>[];
}

const { post, allPosts } = Astro.props;
const { Content } = await post.render();

// Recommended posts (exclude current post and limit to 3)
const recommendedPosts = allPosts
  .filter(p => p.slug !== post.slug)
  .sort(() => Math.random() - 0.5) // Shuffle for variety
  .slice(0, 3);
---

<BaseLayout title={post.data.title} description={post.data.description}>
  <!-- Scroll Progress Bar -->
  <div id="progress-container" class="fixed top-0 left-0 w-full h-1 bg-gray-100 z-50">
    <div id="progress-bar" class="h-1 bg-gradient-to-r from-blue-600 to-indigo-600 transition-all duration-300 ease-out"></div>
  </div>

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <div class="flex flex-col lg:flex-row gap-12">
      <!-- Main Article -->
      <article class="lg:w-2/3 prose prose-lg prose-slate max-w-none font-serif leading-relaxed">
        <header class="mb-12">
          <h1 class="text-4xl sm:text-5xl font-extrabold mb-4 text-gray-900 tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-blue-700 to-indigo-700">
            {post.data.title}
          </h1>
          <div class="flex flex-wrap gap-2 mb-4">
            {post.data.tags.map(tag => (
              <span class="text-sm font-medium px-3 py-1 rounded-full bg-blue-50 text-blue-700 hover:bg-blue-100 transition-colors">
                {tag}
              </span>
            ))}
          </div>
          <div class="flex items-center gap-4 text-sm text-gray-500 mb-6">
            <time datetime={post.data.pubDate} class="font-medium">
              {new Date(post.data.pubDate).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
            <span> • {Math.ceil(post.body.split(' ').length /200)} min read</span> 
          </div>
          {post.data.image && (
            <figure class="my-10 text-center">
              <img 
                src={post.data.image} 
                alt={post.data.imageAlt || post.data.title} 
                class="w-full max-w-4xl mx-auto rounded-2xl shadow-xl object-cover transition-transform hover:scale-[1.02] duration-300"
                loading="lazy"
              />
              {post.data.imageAlt && (
                <figcaption class="text-sm text-gray-500 mt-3 italic">{post.data.imageAlt}</figcaption>
              )}
            </figure>
          )}
        </header>

        <!-- Blog Content -->
        <div class="content-area max-w-[850px] mx-auto space-y-3 text-lg ml-0">
          <Content />
        </div>

       

        <!-- Navigation -->
        <div class="mt-8 flex justify-between pt-6 border-t border-gray-200">
          <a href="/blog/" class="text-blue-600 hover:text-indigo-600 hover:underline font-medium transition-colors">
            ← Back to all posts
          </a>
        </div>
      </article>

      <!-- Sidebar -->
      <aside class="lg:w-1/3 lg:pl-8 lg:border-l lg:border-gray-200">
        <div class="sticky top-24 space-y-12">
          <!-- TOC -->
          <div>
            <h2 class="text-xl font-semibold mb-4 text-gray-900">Table of Contents</h2>
            <nav id="toc" class="text-sm space-y-3 text-gray-600"></nav>
          </div>

          <!-- Recommended Reads -->
          <div>
            <h2 class="text-xl font-semibold mb-6 text-gray-900">Recommended Reads</h2>
            <div class="space-y-6">
              {recommendedPosts.map(recPost => (
                <a href={`/blog/${recPost.slug}/`} class="block group">
                  <article class="p-4 border border-gray-200 rounded-xl bg-white shadow-sm hover:shadow-md hover:border-blue-200 transition-all duration-300">
                    <h3 class="text-lg font-semibold mb-2 text-gray-900 group-hover:text-blue-600 transition-colors">
                      {recPost.data.title}
                    </h3>
                    <p class="text-sm text-gray-600 mb-2 line-clamp-2">
                      {recPost.data.description}
                    </p>
                    <div class="flex items-center gap-2 text-sm text-gray-500">
                      <time datetime={recPost.data.pubDate}>
                        {new Date(recPost.data.pubDate).toLocaleDateString('en-US', {
                          month: 'short',
                          day: 'numeric'
                        })}
                      </time>
                    </div>
                  </article>
                </a>
              ))}
            </div>
          </div>
        </div>
      </aside>
    </div>
  </div>
</BaseLayout>

<style is:global>
  /* Fonts */
  body {
    font-family: 'Inter', system-ui, sans-serif;
    background: #ffffff;
    color: #1e293b;
  }

  .prose {
    font-family: 'Merriweather', serif;
    line-height: 1.8;
    color: #1e293b;
  }

  .prose h1, .prose h2, .prose h3 {
    font-family: 'Inter', system-ui, sans-serif;
    font-weight: 800;
    color: #111827;
  }

  .prose h2 {
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    font-size: 1.875rem;
  }

  /* Callouts */
  .callout { 
    padding: 1.25rem; 
    border-radius: 0.75rem; 
    margin: 1.5rem 0; 
    font-size: 1rem; 
    transition: transform 0.2s ease, box-shadow 0.2s ease; 
  }
  .callout:hover { 
    transform: translateY(-2px); 
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); 
  }
  .callout-tip { 
    background: #e0f2fe; 
    border-left: 4px solid #2563eb; 
    color: #1e40af; 
  }
  .callout-warning { 
    background: #fef3c7; 
    border-left: 4px solid #d97706; 
    color: #92400e; 
  }
  .callout-note { 
    background: #d1fae5; 
    border-left: 4px solid #059669; 
    color: #065f46; 
  }

  /* Blockquote */
  blockquote { 
    border-left: 4px solid #3b82f6; 
    padding: 1rem 1.5rem; 
    font-style: italic; 
    background: #f8fafc; 
    border-radius: 0.75rem; 
    color: #4b5563; 
    margin: 1.5rem 0; 
  }

  /* Code Blocks */
  pre { 
    position: relative; 
    background: #1e293b !important; 
    color: #f8fafc !important; 
    padding: 1.5rem; 
    border-radius: 0.75rem; 
    overflow-x: auto; 
    font-size: 0.9rem; 
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); 
  }
  pre code { 
    font-family: 'Fira Code', monospace; 
  }
  .copy-btn { 
    position: absolute; 
    top: 0.75rem; 
    right: 0.75rem; 
    background: #475569; 
    color: white; 
    border-radius: 0.5rem; 
    padding: 0.5rem 1rem; 
    font-size: 0.85rem; 
    cursor: pointer; 
    transition: background 0.2s, transform 0.2s; 
  }
  .copy-btn:hover { 
    background: #64748b; 
    transform: scale(1.05); 
  }
  .copy-btn:active { 
    background: #2563eb; 
    transform: scale(0.95); 
  }

  /* Images */
  .content-area img { 
    border-radius: 0.75rem; 
    transition: transform 0.3s ease, box-shadow 0.3s ease; 
  }
  .content-area img:hover { 
    transform: scale(1.02); 
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15); 
  }

  /* TOC */
  #toc a { 
    display: block; 
    padding: 0.5rem 0; 
    transition: color 0.2s ease, transform 0.2s ease; 
    border-left: 2px solid transparent; 
  }
  #toc a:hover { 
    color: #2563eb; 
    transform: translateX(4px); 
    border-left-color: #2563eb; 
  }
  #toc a[class="ml-4"] { 
    padding-left: 1rem; 
    font-size: 0.95rem; 
  }

  /* Responsive */
  @media (max-width: 1024px) { 
    aside { display: none; } 
    .prose { max-width: 100%; }
  }
  @media (max-width: 640px) {
    .content-area { padding: 0; }
    h1 { font-size: 2.25rem; }
  }
</style>

<script>
  // Scroll Progress Bar
  if (typeof window !== "undefined") {
    const updateProgress = () => {
      const scrollTop = window.scrollY;
      const docHeight = document.body.scrollHeight - window.innerHeight;
      const progress = docHeight > 0 ? (scrollTop / docHeight) * 100 : 0;
      document.getElementById("progress-bar")!.style.width = `${progress}%`;
    };

    window.addEventListener("scroll", updateProgress, { passive: true });
    window.addEventListener("resize", updateProgress, { passive: true });

    // Cleanup
    window.addEventListener("unload", () => {
      window.removeEventListener("scroll", updateProgress);
      window.removeEventListener("resize", updateProgress);
    });
  }

  // TOC Generator with Smooth Scrolling
  if (typeof window !== "undefined") {
    window.addEventListener("DOMContentLoaded", () => {
      const headings = document.querySelectorAll(".content-area h2, .content-area h3");
      const toc = document.getElementById("toc")!;
      headings.forEach((h: HTMLElement, i: number) => {
        if (!h.id) h.id = `section-${i + 1}`;
        const link = document.createElement("a");
        link.href = `#${h.id}`;
        link.textContent = h.textContent || "";
        link.className = h.tagName === "H2" ? "font-medium" : "ml-4";
        link.setAttribute("aria-label", `Jump to ${h.textContent}`);
        link.addEventListener("click", (e) => {
          e.preventDefault();
          document.querySelector(`#${h.id}`)?.scrollIntoView({ behavior: "smooth" });
          window.history.pushState(null, "", `#${h.id}`);
        });
        toc.appendChild(link);
      });
    });
  }

  // Code Copy Button
  if (typeof window !== "undefined") {
    window.addEventListener("DOMContentLoaded", () => {
      document.querySelectorAll("pre").forEach(block => {
        const button = document.createElement("button");
        button.textContent = "Copy";
        button.className = "copy-btn";
        button.setAttribute("aria-label", "Copy code to clipboard");
        button.addEventListener("click", async () => {
          try {
            await navigator.clipboard.writeText(block.querySelector("code")?.innerText || "");
            button.textContent = "Copied!";
            button.setAttribute("aria-label", "Code copied");
            setTimeout(() => {
              button.textContent = "Copy";
              button.setAttribute("aria-label", "Copy code to clipboard");
            }, 2000);
          } catch (err) {
            console.error("Failed to copy:", err);
            button.textContent = "Error";
            setTimeout(() => button.textContent = "Copy", 2000);
          }
        });
        block.appendChild(button);
      });
    });
  }
</script>


