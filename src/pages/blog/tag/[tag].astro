---
import { getCollection } from "astro:content";
import BaseLayout from '../../../layouts/BlogLayout.astro';

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  // Collect all unique tags
  const allTags = new Set();
  posts.forEach((post) => {
    (post.data.tags ?? []).forEach((tag) => allTags.add(tag.toLowerCase()));
  });

  return Array.from(allTags).map((tag) => ({
    params: { tag },
  }));
}

const { tag } = Astro.params;
const posts = await getCollection("blog");

// Case-insensitive tag filtering
const filteredPosts = posts.filter((post) =>
  post.data.tags?.map((t) => t.toLowerCase()).includes(tag.toLowerCase())
);
---

<BaseLayout title={`Posts tagged with "${tag}"`} description={`All blog posts related to ${tag}`}>
  <div class="min-h-screen py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-3xl mx-auto">
      <!-- Header -->
      <div class="text-center mb-16">
        <div class="inline-flex items-center justify-center p-2 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full mb-6">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
          </svg>
        </div>
        <h1 class="text-4xl font-bold text-gray-900 mb-4">
          Tag: <span class="text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-purple-600">{tag}</span>
        </h1>
        <p class="text-lg text-gray-600">
          {filteredPosts.length} article{filteredPosts.length !== 1 ? 's' : ''} tagged
        </p>
      </div>

      <!-- No posts message -->
      {filteredPosts.length === 0 && (
        <div class="text-center py-16 border-2 border-dashed border-gray-200 rounded-xl">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-300 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <p class="text-xl text-gray-500 mb-6">No posts found with this tag</p>
          <a href="/blog" class="inline-flex items-center font-medium text-indigo-600 hover:text-indigo-500 transition-colors duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Browse all articles
          </a>
        </div>
      )}

      <!-- Posts list -->
      {filteredPosts.length > 0 && (
        <div class="space-y-10">
          {filteredPosts.map((post) => (
            <article class="group relative">
              <div class="absolute -inset-3 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div class="relative">
                <div class="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-3">
                  <h2 class="text-2xl font-semibold text-gray-900 group-hover:text-indigo-700 transition-colors duration-200">
                    <a href={`/MySpace//blog/${post.slug}/`} class="focus:outline-none">
                      {/* Extend link to entire card */}
                      <span class="absolute inset-0" aria-hidden="true"></span>
                      {post.data.title}
                    </a>
                  </h2>
                  <time class="text-sm text-gray-500 whitespace-nowrap" datetime={post.data.pubDate.toISOString()}>
                    {new Date(post.data.pubDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric'
                    })}
                  </time>
                </div>
                
                {post.data.description && (
                  <p class="text-gray-600 mb-4 leading-relaxed">
                    {post.data.description}
                  </p>
                )}
                
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-2">
                    <span class="text-xs font-medium text-indigo-600 px-2.5 py-0.5 rounded-full border border-indigo-200">
                      Read article
                    </span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-indigo-500 opacity-0 group-hover:opacity-100 transform group-hover:translate-x-1 transition-all duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                  </div>
                  
                  {post.data.tags && post.data.tags.length > 0 && (
                    <div class="flex space-x-2">
                      {post.data.tags.slice(0, 2).map((t) => (
                        <span class={`text-xs font-medium px-2.5 py-0.5 rounded-full ${t.toLowerCase() === tag ? 'bg-indigo-100 text-indigo-800' : 'bg-gray-100 text-gray-800'}`}>
                          {t}
                        </span>
                      ))}
                      {post.data.tags.length > 2 && (
                        <span class="text-xs font-medium text-gray-500 px-2 py-0.5">
                          +{post.data.tags.length - 2}
                        </span>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </article>
          ))}
        </div>
      )}
    </div>
  </div>
</BaseLayout>





